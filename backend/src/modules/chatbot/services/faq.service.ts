import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, In } from 'typeorm';
import { FaqQuestion } from '../entities/faq-question.entity';
import { Tag } from '../entities/tag.entity';

@Injectable()
export class FaqService {
  constructor(
    @InjectRepository(FaqQuestion)
    private faqRepository: Repository<FaqQuestion>,
    @InjectRepository(Tag)
    private tagRepository: Repository<Tag>,
  ) {}

  async findByTags(tagIds: string[], language: string = 'en'): Promise<any[]> {
    const questions = await this.faqRepository
      .createQueryBuilder('faq')
      .leftJoinAndSelect('faq.tags', 'tag')
      .where('tag.id IN (:...tagIds)', { tagIds })
      .andWhere('faq.isActive = :isActive', { isActive: true })
      .orderBy('faq.order', 'ASC')
      .addOrderBy('faq.viewCount', 'DESC')
      .getMany();

    return this.formatQuestions(questions, language);
  }

  async findByKeywords(keywords: string[], language: string = 'en'): Promise<any[]> {
    const queryBuilder = this.faqRepository
      .createQueryBuilder('faq')
      .leftJoinAndSelect('faq.tags', 'tags')
      .where('faq.isActive = :isActive', { isActive: true });

    // Search in questions based on language
    const questionField = `question${language.charAt(0).toUpperCase() + language.slice(1)}`;
    keywords.forEach((keyword, index) => {
      queryBuilder.orWhere(`LOWER(faq.${questionField}) LIKE :keyword${index}`, {
        [`keyword${index}`]: `%${keyword.toLowerCase()}%`,
      });
    });

    const questions = await queryBuilder
      .orderBy('faq.viewCount', 'DESC')
      .limit(10)
      .getMany();

    // Increment view count
    if (questions.length > 0) {
      await this.faqRepository
        .createQueryBuilder()
        .update(FaqQuestion)
        .set({ viewCount: () => 'viewCount + 1' })
        .whereInIds(questions.map(q => q.id))
        .execute();
    }

    return this.formatQuestions(questions, language);
  }

  async getAllTags(language: string = 'en'): Promise<any[]> {
    const tags = await this.tagRepository.find({
      where: { isActive: true },
      order: { category: 'ASC', order: 'ASC' },
    });

    return tags.map(tag => ({
      id: tag.id,
      name: this.getLocalizedField(tag, 'name', language),
      category: tag.category,
      icon: tag.icon,
    }));
  }

  async getPopularQuestions(limit: number = 5, language: string = 'en'): Promise<any[]> {
    const questions = await this.faqRepository.find({
      where: { isActive: true },
      order: { viewCount: 'DESC' },
      take: limit,
      relations: ['tags'],
    });

    return this.formatQuestions(questions, language);
  }

  private formatQuestions(questions: FaqQuestion[], language: string): any[] {
    return questions.map(q => ({
      id: q.id,
      question: this.getLocalizedField(q, 'question', language),
      answer: this.getLocalizedField(q, 'answer', language),
      category: q.category,
      tags: q.tags?.map(tag => ({
        id: tag.id,
        name: this.getLocalizedField(tag, 'name', language),
      })) || [],
    }));
  }

  private getLocalizedField(entity: any, field: string, language: string): string {
    const langSuffix = language.charAt(0).toUpperCase() + language.slice(1);
    return entity[`${field}${langSuffix}`] || entity[`${field}En`];
  }

  // Seed initial data
  async seedInitialData(): Promise<void> {
    const existingCount = await this.tagRepository.count();
    if (existingCount > 0) return;

    // Create tags
    const tags = await this.tagRepository.save([
      {
        name: 'passport',
        nameEn: 'Passport',
        nameSi: 'р╖Ар╖Тр╢пр╖Ър╖Б р╢Ьр╢╕р╢▒р╖К р╢╢р╢╜р╢┤р╢нр╖КтАНр╢╗р╢║',
        nameTa: 'роХроЯро╡рпБроЪрпНроЪрпАроЯрпНроЯрпБ',
        category: 'documents',
        icon: 'ЁЯЫВ',
        order: 1,
      },
      {
        name: 'driving-license',
        nameEn: 'Driving License',
        nameSi: 'р╢╗р╖Тр╢║р╢пр╖Фр╢╗р╖Ф р╢╢р╢╜р╢┤р╢нр╖КтАНр╢╗р╢║',
        nameTa: 'роУроЯрпНроЯрпБроиро░рпН роЙро░ро┐роороорпН',
        category: 'documents',
        icon: 'ЁЯЪЧ',
        order: 2,
      },
      {
        name: 'birth-certificate',
        nameEn: 'Birth Certificate',
        nameSi: 'р╢Лр╢┤р╖Кр╢┤р╖Рр╢▒р╖Кр╢▒ р╖Гр╖Др╢нр╖Тр╢Ър╢║',
        nameTa: 'рокро┐ро▒рокрпНрокрпБ роЪро╛ройрпНро▒ро┐родро┤рпН',
        category: 'documents',
        icon: 'ЁЯС╢',
        order: 3,
      },
      {
        name: 'queue-system',
        nameEn: 'Queue System',
        nameSi: 'р╢┤р╖Эр╢╜р╖Тр╢╕р╖К р╢┤р╢пр╖Кр╢░р╢нр╖Тр╢║',
        nameTa: 'ро╡ро░ро┐роЪрпИ роорпБро▒рпИ',
        category: 'services',
        icon: 'ЁЯУ▒',
        order: 4,
      },
    ]);

    // Create FAQ questions
    const passportTag = tags.find(t => t.name === 'passport');
    const queueTag = tags.find(t => t.name === 'queue-system');

    await this.faqRepository.save([
      {
        questionEn: 'How do I apply for a new passport?',
        questionSi: 'р╢▒р╖А р╖Ар╖Тр╢пр╖Ър╖Б р╢Ьр╢╕р╢▒р╖К р╢╢р╢╜р╢┤р╢нр╖КтАНр╢╗р╢║р╢Ър╖К р╖Гр╢│р╖Др╖П р╢Ер╢║р╢пр╖Фр╢╕р╖К р╢Ър╢╗р╢▒р╖Кр╢▒р╖Ъ р╢Ър╖Щр╖Гр╖Ър╢п?',
        questionTa: 'рокрпБродро┐роп роХроЯро╡рпБроЪрпНроЪрпАроЯрпНроЯрпБроХрпНроХрпБ роОрокрпНрокроЯро┐ ро╡ро┐рогрпНрогрокрпНрокро┐рокрпНрокродрпБ?',
        answerEn: 'To apply for a new passport: 1) Visit the nearest passport office or apply online, 2) Submit required documents (Birth Certificate, NIC, proof of address), 3) Pay the applicable fees, 4) Attend biometric capture appointment, 5) Collect passport after processing (usually 10-14 working days).',
        answerSi: 'р╢▒р╖А р╖Ар╖Тр╢пр╖Ър╖Б р╢Ьр╢╕р╢▒р╖К р╢╢р╢╜р╢┤р╢нр╖КтАНр╢╗р╢║р╢Ър╖К р╖Гр╢│р╖Др╖П: 1) р╖Ер╢Яр╢╕ р╖Ар╖Тр╢пр╖Ър╖Б р╢Ьр╢╕р╢▒р╖К р╢╢р╢╜р╢┤р╢нр╖КтАНр╢╗ р╢Ър╖Пр╢╗р╖Кр╢║р╖Пр╢╜р╢║р╢з р╢┤р╖Рр╢╕р╖Тр╢лр╖Щр╢▒р╖Кр╢▒ р╖Др╖Э р╢╕р╖Пр╢╗р╖Кр╢Ьр╢Ьр╢нр╖А р╢Ер╢║р╢пр╖Фр╢╕р╖К р╢Ър╢╗р╢▒р╖Кр╢▒, 2) р╢Ер╖Ар╖Бр╖КтАНр╢║ р╢╜р╖Ър╢Ыр╢▒ р╢Йр╢пр╖Тр╢╗р╖Тр╢┤р╢нр╖К р╢Ър╢╗р╢▒р╖Кр╢▒, 3) р╢Ер╢пр╖Пр╖Е р╢Ьр╖Пр╖Гр╖Кр╢нр╖Ф р╢Ьр╖Щр╖Ар╢▒р╖Кр╢▒, 4) biometric р╢пр╢нр╖Кр╢н р╢╜р╢╢р╖П р╢пр╖Ур╢╕ р╖Гр╢│р╖Др╖П р╢┤р╖Рр╢╕р╖Тр╢лр╖Щр╢▒р╖Кр╢▒, 5) р╖Гр╖Рр╢Ър╖Гр╖Ур╢╕р╖Щр╢▒р╖К р╢┤р╖Гр╖Ф р╢╢р╢╜р╢┤р╢нр╖КтАНр╢╗р╢║ р╢╜р╢╢р╖П р╢Ьр╢▒р╖Кр╢▒.',
        answerTa: 'рокрпБродро┐роп роХроЯро╡рпБроЪрпНроЪрпАроЯрпНроЯрпБроХрпНроХрпБ ро╡ро┐рогрпНрогрокрпНрокро┐роХрпНроХ: 1) роЕро░рпБроХро┐ро▓рпБро│рпНро│ роХроЯро╡рпБроЪрпНроЪрпАроЯрпНроЯрпБ роЕро▓рпБро╡ро▓роХродрпНродро┐ро▒рпНроХрпБ роЪрпЖро▓рпНро▓ро╡рпБроорпН, 2) родрпЗро╡рпИропро╛рой роЖро╡рогроЩрпНроХро│рпИ роЪрооро░рпНрокрпНрокро┐роХрпНроХро╡рпБроорпН, 3) роХроЯрпНроЯрогроорпН роЪрпЖро▓рпБродрпНродро╡рпБроорпН, 4) рокропрпЛроорпЖроЯрпНро░ро┐роХрпН роЪроирпНродро┐рокрпНрокрпБроХрпНроХрпБ ро╡ро░ро╡рпБроорпН, 5) роЪрпЖропро▓ро╛роХрпНроХродрпНродро┐ро▒рпНроХрпБрокрпН рокро┐ро▒роХрпБ роХроЯро╡рпБроЪрпНроЪрпАроЯрпНроЯрпИ рокрпЖро▒ро╡рпБроорпН.',
        category: 'documents',
        tags: passportTag ? [passportTag] : [],
        order: 1,
      },
      {
        questionEn: 'How does the QR code queue system work?',
        questionSi: 'QR р╢Ър╖Ър╢н р╢┤р╖Эр╢╜р╖Тр╢╕р╖К р╢┤р╢пр╖Кр╢░р╢нр╖Тр╢║ р╢Ър╖КтАНр╢╗р╖Тр╢║р╖П р╢Ър╢╗р╢▒р╖Кр╢▒р╖Ъ р╢Ър╖Щр╖Гр╖Ър╢п?',
        questionTa: 'QR роХрпБро▒ро┐ропрпАроЯрпБ ро╡ро░ро┐роЪрпИ роорпБро▒рпИ роОрокрпНрокроЯро┐ ро╡рпЗро▓рпИ роЪрпЖропрпНроХро┐ро▒родрпБ?',
        answerEn: 'The QR code queue system works as follows: 1) Scan the QR code displayed at the government office entrance, 2) Select your required service from the list, 3) Receive a digital token number, 4) Track your position in real-time through the app, 5) Get notifications when your turn approaches, 6) Show your token at the counter when called.',
        answerSi: 'QR р╢Ър╖Ър╢н р╢┤р╖Эр╢╜р╖Тр╢╕р╖К р╢┤р╢пр╖Кр╢░р╢нр╖Тр╢║: 1) р╢Ър╖Пр╢╗р╖Кр╢║р╖Пр╢╜ р╢┤р╖Тр╖Ар╖Тр╖Гр╖Фр╢╕р╖Ъ р╢Зр╢нр╖Т QR р╢Ър╖Ър╢нр╢║ scan р╢Ър╢╗р╢▒р╖Кр╢▒, 2) р╢Фр╢╢р╢з р╢Ер╖Ар╖Бр╖КтАНр╢║ р╖Гр╖Ър╖Ар╖Пр╖А р╢нр╖Эр╢╗р╢▒р╖Кр╢▒, 3) р╢йр╖Тр╢вр╖Тр╢зр╢╜р╖К р╢зр╖Эр╢Ър╢▒р╖К р╢Ер╢Вр╢Ър╢║р╢Ър╖К р╢╜р╢╢р╖П р╢Ьр╢▒р╖Кр╢▒, 4) р╢║р╖Щр╢пр╖Фр╢╕ р╖Др╢╗р╖Др╖П р╢Фр╢╢р╖Ъ р╖Гр╖Кр╢ор╖Пр╢▒р╢║ р╢▒р╖Тр╢╗р╖Ур╢Ър╖Кр╖Вр╢лр╢║ р╢Ър╢╗р╢▒р╖Кр╢▒, 5) р╢Фр╢╢р╖Ъ р╖Ар╖Пр╢╗р╢║ р╖Ер╢Яр╖П р╖Ар╢▒ р╖Ар╖Тр╢з р╢пр╖Рр╢▒р╖Фр╢╕р╖К р╢пр╖Ур╢╕р╢Ър╖К р╢╜р╖Рр╢╢р╖Ъ.',
        answerTa: 'QR роХрпБро▒ро┐ропрпАроЯрпБ ро╡ро░ро┐роЪрпИ роорпБро▒рпИ: 1) роЕро▓рпБро╡ро▓роХ роирпБро┤рпИро╡ро╛ропро┐ро▓ро┐ро▓рпН роЙро│рпНро│ QR роХрпБро▒ро┐ропрпАроЯрпНроЯрпИ ро╕рпНроХрпЗройрпН роЪрпЖропрпНропро╡рпБроорпН, 2) родрпЗро╡рпИропро╛рой роЪрпЗро╡рпИропрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН, 3) роЯро┐роЬро┐роЯрпНроЯро▓рпН роЯрпЛроХрпНроХройрпН роОрогрпНрогрпИрокрпН рокрпЖро▒ро╡рпБроорпН, 4) роЖрокрпН роорпВро▓роорпН роЙроЩрпНроХро│рпН роиро┐ро▓рпИропрпИроХрпН роХрогрпНроХро╛рогро┐роХрпНроХро╡рпБроорпН, 5) роЙроЩрпНроХро│рпН роорпБро▒рпИ роирпЖро░рпБроЩрпНроХрпБроорпНрокрпЛродрпБ роЕро▒ро┐ро╡ро┐рокрпНрокрпБ рокрпЖро▒ро╡рпБроорпН.',
        category: 'services',
        tags: queueTag ? [queueTag] : [],
        order: 2,
      },
    ]);
  }
}